print("---------------------")
print("# 양의 실수, 음의 실수")
# 양의 실수, 음의 실수
a = 158.23
print(a)
a = -158.23
print(a)

# 소수부가 0일 때 0을 생략
print("# 소수부가 0일 때 0을 생략")
a = 5.
print(a)

# 10억의 지수 표현 방식 (실수 방지용)
print("# 10억의 지수 표현 방식 (실수 방지용)")
a = 1e9
print(a)

# 컴퓨터는 실수를 정확히 표현하지 못함
print("# 컴퓨터는 실수를 정확히 표현하지 못함")
a = 0.3 + 0.6
print(a)

# round(a,b) = a는 실수형 데이터, b는 반올림하고자 하는 위치-1
print("# round(a,b) = a는 실수형 데이터, b는 반올림하고자 하는 위치-1")
print(round(a, 4))

# 자료형 연산
# / = 실수형 몫
# // = 정수형 몫
print("# / = 실수형 몫, // = 정수형 몫")
a = 7
b = 3
print(a / b)
print(a // b)
print(a % b)

print("---------------------")
# 리스트 초기화 방법
print("# 리스트 초기화 방법")
a = list()
print(a)

a = []
print(a)

n = 10
a = [0] * n
print(a)

print("---------------------")
# 인덱싱
print("# 인덱싱")
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a[-1])
a[1] = 10
print(a)
print(a[0])

# 슬라이싱 = 연속적인 위치를 갖는 원소들을 불러오기 위해
print("# 슬라이싱 = 연속적인 위치를 갖는 원소들을 불러오기 위해")
print(a[1:4])

print("---------------------")
# 리스트 컴프리헨션 = 리스트 초기화 방법 중 하나, 2차원 배열 초기화시 효율적
print("# 리스트 컴프리헨션 = 리스트 초기화 방법 중 하나, 2차원 배열 초기화시 효율적")
array = [i for i in range(20) if i % 2 == 1]
print(array)

# 일반 반복문을 이용한 리스트
print("# 일반 반복문을 이용한 리스트")
array = []
for i in range(20):
  if i % 2 == 1:
    array.append(i)
print(array)

# 2차원 리스트 초기화
# *언더바(_) = 반복을 수행하되 반복을 위한 변수의 값을 무시하고자 할 때
print("# 2차원 리스트 초기화")
n = 3
m = 4
array = [[0] * m for i in range(n)]
print(array)
array[1][1] = 5
print(array)

# 특정 크기를 가지는 2차원 리스트 초기화 할때 리스트 컴프레션 필수
print("# 특정 크기를 가지는 2차원 리스트 초기화 할때 리스트 컴프레션 필수")
array = [[0] * m] * n
print(array)
array[1][1] = 5
print(array)

print("---------------------")
# 리스트 관련 메소드
print("# 리스트 관련 메소드")
a = [1, 4, 3]
print("기본 리스트: ", a)

# append() = 변수명.append() = 리스트에 원소를 하나 삽입
# O(1)
a.append(2)
print("삽입: ", a)

# sort() = 변수명.sort() || 변수명.sort(reverse = True) = 오름차순, 내림차순 정렬
a.sort()
print("오름차순 정렬: ", a)
a.sort(reverse=True)
print("내림차순 정렬: ", a)

# reverse() = 변수명.reverse() = 리스트의 원소 순서를 모두 뒤집는다
a.reverse()
print("원소 뒤집기: ", a)

# insert() = 변수명.insert(삽입 대상 인덱스, 값) = 특정 인덱스 위치에 원소 삽입
# O(N)
a.insert(2, 3)
print("인덱스 2에 3 추가: ", a)

# count() = 변수명.count(값) = 특정 값을 가지는 데이터의 개수를 셀 때 이용
print("값이 3인 데이터 개수: ", a.count(3))

# remove() = 변수명.remove(값) = 특정 값 가지는 원소 제거, 여러개라면 한개만 제거
# O(N)
a.remove(3)
print("값이 3인 데이터 삭제: ", a)

print("---------------------")
# 문자열 자료형
# 문자열 초기화
print("# 문자열 초기화")
data = 'Hello World'
print(data)
data = "Hello World"
print(data)
# \" || \' = 백슬래시를 통해 따옴표 내부에 따옴표 출력
data = "Don't you know \"Python\"?" 
print(data)

#문자열 연산
print("#문자열 연산")
a = "Hello"
b = "World"
print(a+" "+b)
print(a*3)
# 문자열은 내부적으로 리스트와 같음 = 인덱싱, 슬라이싱 가능
a = "ABCDEF"
print(a[2:4])

print("---------------------")
# 튜플 자료형 = 한번 선언된 값 변경X, 소괄호 이용
print("# 튜플 자료형 = 한번 선언된 값 변경X, 소괄호를 이용")
a = (1,2,3,4)
print(a)
# a[2] = 7    <- 출력은 되지만 값 변경이 불가능한 자료형이라 대입 연산자 사용X

print("---------------------")
# 딕셔너리 = key, value 쌍의 데이터를 가지는 자료형, 순서X
# key를 변경 불가능한 데이터로 사용함으로써 값을 찾는 '해쉬 테이블' 구조 (O(1))
print("# 딕셔너리 = key, value 쌍의 데이터를 가지는 자료형")
data = dict()    # 딕셔너리 선언 필수
data['사과'] = 'Apple'
data['바나나'] = 'Banana'
data['코코넛'] = 'Coconut'
print(data)
if '사과' in data:  # 특정 원소 검색
  print("'사과'를 키로 가지는 데이터가 존재한다")

# 사전 자료형 관련 함수
print("# 사전 자료형 관련 함수")
# 딕셔너리.keys() = 키 데이터만 뽑아 리스트로 사용할 때
key_list = data.keys()
print(key_list)
# 딕셔너리.values() = 값 데이터만 뽑아 리스트로 사용할 때
value_list = data.values()
print(value_list)

# 각 키에 따른 값을 하나씩 출력
print("# 각 키에 따른 값을 하나씩 출력")
for key in key_list:
  print(data[key])

print("---------------------")
# 집합 자료형
# 집합 = 중복 허용X, 순서X, 키X, 값O, O(1)
# 집합 초기화 1
data = set([1,1,2,3,4,4,5])
print(data)
# 집합 초기화 2
data = {1,1,2,3,4,4,5}
print(data)

# 집합 자료형 연산
print("# 집합 자료형 연산")
a = set([1,2,3,4,5])
b = {3,4,5,6,7}
print("합집합 : ", a | b) 
print("교집합 : ", a & b)  
print("차집합 : ", a - b)

# 집합 자료형 관련 함수
print("# 집합 자료형 관련 함수")
data = set([1,2,3])
print(data)
# 집합.add() = 하나의 집합 데이터에 값 추가
data.add(4)
print(data)
# 집합.updata() = 한꺼번에 여러 개 값 추가
data.update([5,6])
print(data)
# 집합.remove() = 특정 값 제거
data.remove(3)
print(data)
