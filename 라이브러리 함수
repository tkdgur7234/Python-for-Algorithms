# 내장함수
print("-----------------------")
print("# 내장함수")
# sum()
result = sum([1,2,3,4,5])
print(result)
# max, min
result = max(7,3,5,2)
print(result)
result = min(7,3,5,2)
print(result)
# eval() = 수식이 문자열 형식으로 들어오면 계산 결과를 반환
result = eval("(3+5) * 7")
print(result)
# sorted() = iterable 객체가 들어왔을 때, 정렬된 결과 반환, key속성을 통해 정렬 기준 설정ㅇ
result = sorted([9,1,8,5,4])  # result = sorted([9,1,8,5,4], reverse=True)
print(result)
result = sorted([('홍길동',35), ('이순신',74), ('아무개',50)], key = lambda x: x[1], reverse = True)
print(result)
# sort()
data = [9,1,8,5,4]
data.sort()
print(data)

# itertools
print("-----------------------")
print("# itertools")
# permutations = 순열 클래스 = iterable 객체에서 r개의 데이터를 뽑아 일렬로 나열하는 모든 경우 계산, 클래스이므로 객체 초기화 이후 리스트 자료형으로 변환하여 사용
from itertools import permutations
data = ['A','B','C']
result = list(permutations(data, 3))
print(result)
# combinations = 조합 클래스 = iterable객체에서 r개의 데이터를 뽑아 순서를 고려하지 않고 나열하는 모든 경우 계산
from itertools import combinations
result = list(combinations(data, 2))
print(result)
# product = 중복 가능한 permutations, 뽑고자하는 데이터 수를 repeat 속성값으로
from itertools import product
result = list(product(data, repeat=2))
print(result)
# combinations_with_replacement = 원소 중복 가능한 combinations
from itertools import combinations_with_replacement
result = list(combinations_with_replacement(data, 2))
print(result)

# heapq
print("-----------------------")
print("# heapq")
# 우선순위 큐 기능
# 파이썬의 힙은 최소 힙(Min heap)으로 구성되어 있어 단순히 원소를 힙에 전부 넣었다 빼는 것만으로도 O(NlogN)의 오름차순 정렬이 완료된다.
# 힙 정렬
import heapq
def heapsort(iterable):
  h=[]
  result=[]
  # 모든 원소를 차례대로 힙에 삽입
  for value in iterable:
    heapq.heappush(h, value)
  # 힙에 삽입된 작은 것부터 차례대로 꺼내어 담기
  for _ in range(len(h)):
    result.append(heapq.heappop(h))
  return result
result = heapsort([1,3,5,7,9,2,4,6,8,0])
print(result)

# 파이썬에선 최대 힙(Max heap) 기능 제공 x -> 최대 힙을 구현해야 할때는 원소의 부호를 임시로 변경
# 원소를 삽입하기 전 부호를 반대로 바꾸었다가, 힙에서 꺼낸 뒤에 다시 원상태로 되돌린다.
# 최대힙을 통한 내림차순 힙 정렬
def heapsort(iterable):
  h=[]
  result=[]
  # 모든 원소를 차례대로 힙에 삽입
  for value in iterable:
    heapq.heappush(h, -value)
  # 힙에 삽입된 큰 것부터 차례대로 꺼내어 담기
  for _ in range(len(h)):
    result.append(-heapq.heappop(h))
  return result
result = heapsort([1,3,5,7,9,2,4,6,8,0])
print(result)

# bisect
print("-----------------------")
print("# bisect")
# 1. '정렬된 배열'에서 특정한 원소를 찾을 때 효과적, O(logN)
# bisect_left(a,x) = 정렬된 순서를 유지하며 리스트 a에 데이터 x를 삽입할 가장 왼쪽 인덱스 반환
from bisect import bisect_left, bisect_right
a = [1,2,4,4,8]
x = 4
print(bisect_left(a,x))
print(bisect_right(a,x))
# 2. '정렬된 리스트'에서 '값이 특정 범위에 속하는 원소의 개수' 구할 때 효과적
def count_by_range(a, left_value, right_value):
  # 값이 [left_value, right_value]인 데이터의 개수를 반환하는 함수
  left_index = bisect_left(a, left_value)
  right_index = bisect_right(a, right_value)
  return right_index - left_index
a = [1,2,3,3,3,3,4,4,8,9]
# 값이 4인 데이터 개수 출력
print(count_by_range(a,4,4))
# 값이 [-1,3] 범위의 데이터 개수 출력
print(count_by_range(a,-1,3))

# collections
print("-----------------------")
print("# collections")
# 1. deque = 큐 규현 라이브러리, O(1)
print("# 1. deque = 스택, 큐 구현 라이브러리, O(1)")
from collections import deque
data = deque([2,3,4])    # deque 라이브러리를 사용
data.appendleft(1)  # 첫번째 인덱스에 원소 삽입
data.append(5)  # 마지막 인덱스에 원소 삽입 
data.popleft()  # 첫번째 원소 제거
data.pop()  # 마지막 원소 제거
print(data)
print(list(data))
# 2. Counter = 등장 횟수를 세는 기능
from collections import Counter
counter = Counter(['red', 'blue', 'red', 'green', 'blue', 'blue'])
print(counter['blue'])
print(counter['green'])
print(dict(counter))

# math
print("-----------------------")
print("# math")
# factorial(x) = x!
import math
print(math.factorial(5))
# sqrt(x) = x의 제곱근
print(math.sqrt(7))
# gcd(a, b) = a와 b의 최대 공약수
print(math.gcd(21,14))
# pi, e
print(math.pi)
print(math.e)
